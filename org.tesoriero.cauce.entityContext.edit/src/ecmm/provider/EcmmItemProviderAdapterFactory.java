/**
 */
package ecmm.provider;

import ecmm.util.EcmmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EcmmItemProviderAdapterFactory extends EcmmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EcmmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.VariableDataDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDataDefinitionItemProvider variableDataDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.VariableDataDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDataDefinitionAdapter() {
		if (variableDataDefinitionItemProvider == null) {
			variableDataDefinitionItemProvider = new VariableDataDefinitionItemProvider(this);
		}

		return variableDataDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.EntityContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityContextItemProvider entityContextItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.EntityContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityContextAdapter() {
		if (entityContextItemProvider == null) {
			entityContextItemProvider = new EntityContextItemProvider(this);
		}

		return entityContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.ContextSituation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextSituationItemProvider contextSituationItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.ContextSituation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextSituationAdapter() {
		if (contextSituationItemProvider == null) {
			contextSituationItemProvider = new ContextSituationItemProvider(this);
		}

		return contextSituationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.LogicMemory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicMemoryItemProvider logicMemoryItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.LogicMemory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicMemoryAdapter() {
		if (logicMemoryItemProvider == null) {
			logicMemoryItemProvider = new LogicMemoryItemProvider(this);
		}

		return logicMemoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.DictionaryMemory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DictionaryMemoryItemProvider dictionaryMemoryItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.DictionaryMemory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDictionaryMemoryAdapter() {
		if (dictionaryMemoryItemProvider == null) {
			dictionaryMemoryItemProvider = new DictionaryMemoryItemProvider(this);
		}

		return dictionaryMemoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.HolderMemory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HolderMemoryItemProvider holderMemoryItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.HolderMemory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHolderMemoryAdapter() {
		if (holderMemoryItemProvider == null) {
			holderMemoryItemProvider = new HolderMemoryItemProvider(this);
		}

		return holderMemoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.StackMemory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StackMemoryItemProvider stackMemoryItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.StackMemory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStackMemoryAdapter() {
		if (stackMemoryItemProvider == null) {
			stackMemoryItemProvider = new StackMemoryItemProvider(this);
		}

		return stackMemoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.TimeMemory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeMemoryItemProvider timeMemoryItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.TimeMemory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeMemoryAdapter() {
		if (timeMemoryItemProvider == null) {
			timeMemoryItemProvider = new TimeMemoryItemProvider(this);
		}

		return timeMemoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.ContextAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextActionItemProvider contextActionItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.ContextAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextActionAdapter() {
		if (contextActionItemProvider == null) {
			contextActionItemProvider = new ContextActionItemProvider(this);
		}

		return contextActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.SensingContextCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensingContextConditionItemProvider sensingContextConditionItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.SensingContextCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensingContextConditionAdapter() {
		if (sensingContextConditionItemProvider == null) {
			sensingContextConditionItemProvider = new SensingContextConditionItemProvider(this);
		}

		return sensingContextConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.MemoryContextCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoryContextConditionItemProvider memoryContextConditionItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.MemoryContextCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoryContextConditionAdapter() {
		if (memoryContextConditionItemProvider == null) {
			memoryContextConditionItemProvider = new MemoryContextConditionItemProvider(this);
		}

		return memoryContextConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ecmm.SystemContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemContextItemProvider systemContextItemProvider;

	/**
	 * This creates an adapter for a {@link ecmm.SystemContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemContextAdapter() {
		if (systemContextItemProvider == null) {
			systemContextItemProvider = new SystemContextItemProvider(this);
		}

		return systemContextItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (variableDataDefinitionItemProvider != null) variableDataDefinitionItemProvider.dispose();
		if (entityContextItemProvider != null) entityContextItemProvider.dispose();
		if (contextSituationItemProvider != null) contextSituationItemProvider.dispose();
		if (logicMemoryItemProvider != null) logicMemoryItemProvider.dispose();
		if (dictionaryMemoryItemProvider != null) dictionaryMemoryItemProvider.dispose();
		if (holderMemoryItemProvider != null) holderMemoryItemProvider.dispose();
		if (stackMemoryItemProvider != null) stackMemoryItemProvider.dispose();
		if (timeMemoryItemProvider != null) timeMemoryItemProvider.dispose();
		if (contextActionItemProvider != null) contextActionItemProvider.dispose();
		if (sensingContextConditionItemProvider != null) sensingContextConditionItemProvider.dispose();
		if (memoryContextConditionItemProvider != null) memoryContextConditionItemProvider.dispose();
		if (systemContextItemProvider != null) systemContextItemProvider.dispose();
	}

}
