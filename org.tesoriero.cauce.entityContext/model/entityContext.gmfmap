<?xml version="1.0" encoding="UTF-8"?>
<gmfmap:Mapping
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:gmfmap="http://www.eclipse.org/gmf/2008/mappings"
    xmlns:gmftool="http://www.eclipse.org/gmf/2005/ToolDefinition">
  <nodes>
    <containmentFeature
        href="entityContext.ecore#//SystemContext/entities"/>
    <ownedChild>
      <domainMetaElement
          href="entityContext.ecore#//EntityContext"/>
      <domainInitializer
          xsi:type="gmfmap:FeatureSeqInitializer">
        <initializers
            xsi:type="gmfmap:FeatureValueSpec">
          <feature
              xsi:type="ecore:EAttribute"
              href="entityContext.ecore#//EntityContext/id"/>
          <value
              body="system.entities->collect(id)&#xD;&#xA;->union(system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
        </initializers>
        <initializers
            xsi:type="gmfmap:FeatureValueSpec">
          <feature
              xsi:type="ecore:EAttribute"
              href="entityContext.ecore#//EntityContext/entity"/>
          <value
              body="'Entity'.concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
        </initializers>
      </domainInitializer>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping"
          viewPattern=""
          editorPattern=""
          editPattern="">
        <diagramLabel
            href="entityContext.gmfgraph#EntityContextEntity"/>
        <features
            href="entityContext.ecore#//EntityContext/entity"/>
      </labelMappings>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping"
          readOnly="true"
          viewPattern="({0})">
        <diagramLabel
            href="entityContext.gmfgraph#EntityContextId"/>
        <features
            href="entityContext.ecore#//EntityContext/id"/>
      </labelMappings>
      <tool
          xsi:type="gmftool:CreationTool"
          href="entityContext.gmftool#//@palette/@tools.0/@tools.0"/>
      <diagramNode
          href="entityContext.gmfgraph#EntityContext"/>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0"
          referencedChild="//@nodes.0/@ownedChild/@children.0/@ownedChild">
        <containmentFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <childrenFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <ownedChild>
          <domainMetaElement
              href="entityContext.ecore#//HolderMemory"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/id"/>
              <value
                  body="entityContext.system.entities->collect(id)&#xD;&#xA;->union(entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/name"/>
              <value
                  body="(entityContext.entity.concat('.holderMemory')).concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern=""
              editorPattern=""
              editPattern="">
            <diagramLabel
                href="entityContext.gmfgraph#HolderMemoryName"/>
            <features
                href="entityContext.ecore#//ContextMemory/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              readOnly="true"
              viewPattern="({0})">
            <diagramLabel
                href="entityContext.gmfgraph#HolderMemoryId"/>
            <features
                href="entityContext.ecore#//ContextMemory/id"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="entityContext.gmftool#//@palette/@tools.0/@tools.4"/>
          <diagramNode
              href="entityContext.gmfgraph#HolderMemory"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0"
          referencedChild="//@nodes.0/@ownedChild/@children.1/@ownedChild">
        <containmentFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <childrenFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <ownedChild>
          <domainMetaElement
              href="entityContext.ecore#//LogicMemory"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/id"/>
              <value
                  body="entityContext.system.entities->collect(id)&#xD;&#xA;->union(entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/name"/>
              <value
                  body="(entityContext.entity.concat('.stackMemory')).concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern=""
              editPattern="">
            <diagramLabel
                href="entityContext.gmfgraph#LogicMemoryName"/>
            <features
                href="entityContext.ecore#//ContextMemory/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              readOnly="true"
              viewPattern="({0})">
            <diagramLabel
                href="entityContext.gmfgraph#LogicMemoryId"/>
            <features
                href="entityContext.ecore#//ContextMemory/id"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="entityContext.gmftool#//@palette/@tools.0/@tools.2"/>
          <diagramNode
              href="entityContext.gmfgraph#LogicMemory"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0"
          referencedChild="//@nodes.0/@ownedChild/@children.2/@ownedChild">
        <containmentFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <childrenFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <ownedChild>
          <domainMetaElement
              href="entityContext.ecore#//TimeMemory"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/id"/>
              <value
                  body="entityContext.system.entities->collect(id)&#xD;&#xA;->union(entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/name"/>
              <value
                  body="(entityContext.entity.concat('.timeMemory')).concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern=""
              editPattern="">
            <diagramLabel
                href="entityContext.gmfgraph#TimeMemoryName"/>
            <features
                href="entityContext.ecore#//ContextMemory/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              readOnly="true"
              viewPattern="({0})">
            <diagramLabel
                href="entityContext.gmfgraph#TimeMemoryId"/>
            <features
                href="entityContext.ecore#//ContextMemory/id"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="entityContext.gmftool#//@palette/@tools.0/@tools.6"/>
          <diagramNode
              href="entityContext.gmfgraph#TimeMemory"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0"
          referencedChild="//@nodes.0/@ownedChild/@children.3/@ownedChild">
        <containmentFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <childrenFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <ownedChild>
          <domainMetaElement
              href="entityContext.ecore#//StackMemory"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/id"/>
              <value
                  body="entityContext.system.entities->collect(id)&#xD;&#xA;->union(entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/name"/>
              <value
                  body="(entityContext.entity.concat('.stackMemory')).concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern=""
              editPattern="">
            <diagramLabel
                href="entityContext.gmfgraph#StackMemoryName"/>
            <features
                href="entityContext.ecore#//ContextMemory/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              readOnly="true"
              viewPattern="({0})">
            <diagramLabel
                href="entityContext.gmfgraph#StackMemoryId"/>
            <features
                href="entityContext.ecore#//ContextMemory/id"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="entityContext.gmftool#//@palette/@tools.0/@tools.5"/>
          <diagramNode
              href="entityContext.gmfgraph#StackMemory"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <childrenFeature
            href="entityContext.ecore#//EntityContext/state"/>
        <ownedChild>
          <domainMetaElement
              href="entityContext.ecore#//DictionaryMemory"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/id"/>
              <value
                  body="entityContext.system.entities->collect(id)&#xD;&#xA;->union(entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextMemory/name"/>
              <value
                  body="(entityContext.entity.concat('.dictionaryMemory')).concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern=""
              editPattern="">
            <diagramLabel
                href="entityContext.gmfgraph#DictionaryMemoryName"/>
            <features
                href="entityContext.ecore#//ContextMemory/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              readOnly="true"
              viewPattern="({0})"
              editPattern="">
            <diagramLabel
                href="entityContext.gmfgraph#DictionaryMemoryId"/>
            <features
                href="entityContext.ecore#//ContextMemory/id"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="entityContext.gmftool#//@palette/@tools.0/@tools.3"/>
          <diagramNode
              href="entityContext.gmfgraph#DictionaryMemory"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.1"
          referencedChild="//@nodes.0/@ownedChild/@children.5/@ownedChild">
        <containmentFeature
            href="entityContext.ecore#//EntityContext/situations"/>
        <childrenFeature
            href="entityContext.ecore#//EntityContext/situations"/>
        <ownedChild>
          <domainMetaElement
              href="entityContext.ecore#//ContextSituation"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextSituation/id"/>
              <value
                  body="entityContext.system.entities->collect(id)&#xD;&#xA;->union(entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//ContextSituation/name"/>
              <value
                  body="'situation'.concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping">
            <diagramLabel
                href="entityContext.gmfgraph#ContextSituationName"/>
            <features
                href="entityContext.ecore#//ContextSituation/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              readOnly="true"
              viewPattern="({0})"
              editPattern="">
            <diagramLabel
                href="entityContext.gmfgraph#ContextSituationId"/>
            <features
                href="entityContext.ecore#//ContextSituation/id"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="entityContext.gmftool#//@palette/@tools.0/@tools.8"/>
          <diagramNode
              href="entityContext.gmfgraph#ContextSituation"/>
          <children
              compartment="//@nodes.0/@ownedChild/@children.5/@ownedChild/@compartments.0"
              referencedChild="//@nodes.0/@ownedChild/@children.5/@ownedChild/@children.0/@ownedChild">
            <containmentFeature
                href="entityContext.ecore#//ContextSituation/memoryConditions"/>
            <childrenFeature
                href="entityContext.ecore#//ContextSituation/memoryConditions"/>
            <ownedChild>
              <domainMetaElement
                  href="entityContext.ecore#//MemoryContextCondition"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="entityContext.ecore#//ContextCondition/id"/>
                  <value
                      body="situation.entityContext.system.entities->collect(id)&#xD;&#xA;->union(situation.entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
                </initializers>
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="entityContext.ecore#//MemoryContextCondition/expression"/>
                  <value
                      body="'expression'"/>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping">
                <diagramLabel
                    href="entityContext.gmfgraph#MemoryContextConditionExpression"/>
                <features
                    href="entityContext.ecore#//MemoryContextCondition/expression"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="entityContext.gmfgraph#MemoryContextConditionMemory"/>
                <features
                    href="entityContext.ecore#//MemoryContextCondition/memoryName"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="entityContext.gmftool#//@palette/@tools.0/@tools.11"/>
              <diagramNode
                  href="entityContext.gmfgraph#MemoryContextCondition"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.5/@ownedChild/@compartments.1"
              referencedChild="//@nodes.0/@ownedChild/@children.5/@ownedChild/@children.1/@ownedChild">
            <containmentFeature
                href="entityContext.ecore#//ContextSituation/sensingConditions"/>
            <childrenFeature
                href="entityContext.ecore#//ContextSituation/sensingConditions"/>
            <ownedChild>
              <domainMetaElement
                  href="entityContext.ecore#//SensingContextCondition"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="entityContext.ecore#//ContextCondition/id"/>
                  <value
                      body="situation.entityContext.system.entities->collect(id)&#xD;&#xA;->union(situation.entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
                </initializers>
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="entityContext.ecore#//SensingContextCondition/informationflow"/>
                  <value
                      body="'informationFlow'"/>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping">
                <diagramLabel
                    href="entityContext.gmfgraph#SensingContextConditionInformationflow"/>
                <features
                    href="entityContext.ecore#//SensingContextCondition/informationflow"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="entityContext.gmftool#//@palette/@tools.0/@tools.10"/>
              <diagramNode
                  href="entityContext.gmfgraph#SensingContextCondition"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.5/@ownedChild/@compartments.2"
              referencedChild="//@nodes.0/@ownedChild/@children.5/@ownedChild/@children.2/@ownedChild">
            <containmentFeature
                href="entityContext.ecore#//ContextSituation/actions"/>
            <childrenFeature
                href="entityContext.ecore#//ContextSituation/actions"/>
            <ownedChild>
              <domainMetaElement
                  href="entityContext.ecore#//ContextAction"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="entityContext.ecore#//ContextAction/id"/>
                  <value
                      body="situation.entityContext.system.entities->collect(id)&#xD;&#xA;->union(situation.entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(situation.entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
                </initializers>
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="entityContext.ecore#//ContextAction/expression"/>
                  <value
                      body="'expression'"/>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping"
                  viewPattern="">
                <diagramLabel
                    href="entityContext.gmfgraph#ContextActionExpression"/>
                <features
                    href="entityContext.ecore#//ContextAction/expression"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping"
                  readOnly="true"
                  viewPattern="">
                <diagramLabel
                    href="entityContext.gmfgraph#ContextActionMemoryName"/>
                <features
                    href="entityContext.ecore#//ContextAction/memoryName"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="entityContext.gmftool#//@palette/@tools.0/@tools.13"/>
              <diagramNode
                  href="entityContext.gmfgraph#ContextAction"/>
            </ownedChild>
          </children>
          <compartments
              children="//@nodes.0/@ownedChild/@children.5/@ownedChild/@children.0">
            <compartment
                href="entityContext.gmfgraph#Conditions"/>
          </compartments>
          <compartments
              children="//@nodes.0/@ownedChild/@children.5/@ownedChild/@children.1">
            <compartment
                href="entityContext.gmfgraph#Sensing"/>
          </compartments>
          <compartments
              children="//@nodes.0/@ownedChild/@children.5/@ownedChild/@children.2">
            <compartment
                href="entityContext.gmfgraph#Actions"/>
          </compartments>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.2"
          referencedChild="//@nodes.0/@ownedChild/@children.6/@ownedChild">
        <containmentFeature
            href="entityContext.ecore#//EntityContext/variables"/>
        <childrenFeature
            href="entityContext.ecore#//EntityContext/variables"/>
        <ownedChild>
          <domainMetaElement
              href="entityContext.ecore#//VariableDataDefinition"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//VariableDataDefinition/id"/>
              <value
                  body="entityContext.system.entities->collect(id)&#xD;&#xA;->union(entityContext.system.entities->collect(variables->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(state->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(id))->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(actions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(sensingConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->union(entityContext.system.entities->collect(situations->collect(memoryConditions->collect(id))->flatten())->flatten())&#xD;&#xA;->iterate(id; answer : Integer = 0 |  answer.max(id)) + 1"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//VariableDataDefinition/name"/>
              <value
                  body="'name'.concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
            </initializers>
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="entityContext.ecore#//VariableDataDefinition/definition"/>
              <value
                  body="'definition'"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern="{0}:{1}"
              editorPattern="{0}:{1}"
              editPattern="{0}:{1}">
            <diagramLabel
                href="entityContext.gmfgraph#VariableDataDefinitionDefinition"/>
            <features
                href="entityContext.ecore#//VariableDataDefinition/name"/>
            <features
                href="entityContext.ecore#//VariableDataDefinition/definition"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="entityContext.gmftool#//@palette/@tools.0/@tools.15"/>
          <diagramNode
              href="entityContext.gmfgraph#VariableDataDefinition"/>
        </ownedChild>
      </children>
      <compartments
          children="//@nodes.0/@ownedChild/@children.0 //@nodes.0/@ownedChild/@children.1 //@nodes.0/@ownedChild/@children.2 //@nodes.0/@ownedChild/@children.3 //@nodes.0/@ownedChild/@children.4">
        <compartment
            href="entityContext.gmfgraph#State"/>
      </compartments>
      <compartments
          children="//@nodes.0/@ownedChild/@children.5">
        <compartment
            href="entityContext.gmfgraph#Situations"/>
      </compartments>
      <compartments
          children="//@nodes.0/@ownedChild/@children.6">
        <compartment
            href="entityContext.gmfgraph#Definitions"/>
      </compartments>
    </ownedChild>
  </nodes>
  <diagram>
    <diagramCanvas
        href="entityContext.gmfgraph#ecmm"/>
    <domainModel
        href="entityContext.ecore#/"/>
    <domainMetaElement
        href="entityContext.ecore#//SystemContext"/>
    <palette
        href="entityContext.gmftool#//@palette"/>
  </diagram>
  <audits
      id="EntityContextDiagramAuditContainer"
      name="EntityContextDiagramAuditContainer"
      description="EntityContextDiagramAuditContainer">
    <childContainers
        id="SystemCotnextAuditContainer"
        name="SystemCotnextAuditContainer"
        description="SystemCotnextAuditContainer">
      <audits
          name="SystemContextNameNotNullAuditRule"
          description="SystemContextNameNotNullAuditRule"
          id="SystemContextNameNotNullAuditRule"
          message="SystemContext name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//SystemContext/name"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="EntityContextAuditContainer"
        name="EntityContextAuditContainer"
        description="EntityContextAuditContainer">
      <audits
          name="EntityContextIdNotNullAuditRule"
          description="EntityContextIdNotNullAuditRule"
          id="EntityContextIdNotNullAuditRule"
          message="EntityContext ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//EntityContext/id"/>
        </target>
      </audits>
      <audits
          name="EntityContextEntityNotNullAuditRule"
          description="EntityContextEntityNotNullAuditRule"
          id="EntityContextEntityNotNullAuditRule"
          message="EntityContext entity must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//EntityContext/entity"/>
        </target>
      </audits>
      <audits
          name="EntityContextIdUniqueAuditRule"
          description="EntityContextIdUniqueAuditRule"
          id="EntityContextIdUniqueAuditRule"
          message="EntityContext ID must be unique">
        <rule
            body="system.entities->forAll(e | &#xD;&#xA; ((e&lt;>self) implies (e.id&lt;>self.id)) and&#xD;&#xA; e.situations->forAll(s | s.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | &#xD;&#xA;  s.sensingConditions->forAll(sc| sc.id&lt;>self.id) and &#xD;&#xA;  s.memoryConditions->forAll(mc|mc.id&lt;>self.id) and&#xD;&#xA;  s.actions->forAll(a|a.id&lt;>self.id) &#xD;&#xA; ) and&#xD;&#xA; e.variables->forAll(v | v.id&lt;>self.id) and&#xD;&#xA; e.state->forAll(st | st.id&lt;>self.id)&#xD;&#xA;)"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//EntityContext"/>
        </target>
      </audits>
      <audits
          name="EntityContextNameUniqueAuditRule"
          description="EntityContextNameUniqueAuditRule"
          id="EntityContextNameUniqueAuditRule"
          message="EntityContext name must be unique">
        <rule
            body="system.entities->forAll(e| (e&lt;>self) implies (e.entity&lt;>self.entity))"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//EntityContext"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="VariableDataDefinitionAuditContainer"
        name="VariableDataDefinitionAuditContainer"
        description="VariableDataDefinitionAuditContainer">
      <audits
          name="VariableDataDefinitionNameNotNullAuditRule"
          description="VariableDataDefinitionNameNotNullAuditRule"
          id="VariableDataDefinitionNameNotNullAuditRule"
          message="VariableDataDefinition name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//VariableDataDefinition/name"/>
        </target>
      </audits>
      <audits
          name="VariableDataDefinitionDefinitionNotNullAuditRule"
          description="VariableDataDefinitionDefinitionNotNullAuditRule"
          id="VariableDataDefinitionDefinitionNotNullAuditRule"
          message="VariableDataDefinition definition must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//VariableDataDefinition/definition"/>
        </target>
      </audits>
      <audits
          name="VariableDataDefinitionIdNotNullAuditRule"
          description="VariableDataDefinitionIdNotNullAuditRule"
          id="VariableDataDefinitionIdNotNullAuditRule"
          message="VariableDataDefinition ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//VariableDataDefinition/id"/>
        </target>
      </audits>
      <audits
          name="VariableDataDefinitionNameUniqueAuditRule"
          description="VariableDataDefinitionNameUniqueAuditRule"
          id="VariableDataDefinitionNameUniqueAuditRule"
          message="VariableDataDefinition name must be unique in the entity context">
        <rule
            body="entityContext.variables->forAll(v| (v&lt;>self) implies(v.name&lt;>self.name))"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//VariableDataDefinition"/>
        </target>
      </audits>
      <audits
          name="VariableDataDefinitionIdUniqueAuditRule"
          description="VariableDataDefinitionIdUniqueAuditRule"
          id="VariableDataDefinitionIdUniqueAuditRule"
          message="VariableDataDefinition ID must be unique">
        <rule
            body="entityContext.system.entities->forAll(e | &#xD;&#xA; (e.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | s.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | &#xD;&#xA;  s.sensingConditions->forAll(sc| sc.id&lt;>self.id) and &#xD;&#xA;  s.memoryConditions->forAll(mc|mc.id&lt;>self.id) and&#xD;&#xA;  s.actions->forAll(a|a.id&lt;>self.id) &#xD;&#xA; ) and&#xD;&#xA; e.variables->forAll(v | (v&lt;>self) implies (v.id&lt;>self.id)) and&#xD;&#xA; e.state->forAll(st | st.id&lt;>self.id)&#xD;&#xA;)&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//VariableDataDefinition"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="ContextConditionAuditContainer"
        name="ContextConditionAuditContainer"
        description="ContextConditionAuditContainer">
      <audits
          name="ContextConditionIdNotNullAuditRule"
          description="ContextConditionIdNotNullAuditRule"
          id="ContextConditionIdNotNullAuditRule"
          message="ContextCondition ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextCondition/id"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="SensingContextConditionAuditContainer"
        name="SensingContextConditionAuditContainer"
        description="SensingContextConditionAuditContainer">
      <audits
          name="SensingContextConditionInformationFlowNotNullAuditRule"
          description="SensingContextConditionInformationFlowNotNullAuditRule"
          id="SensingContextConditionInformationFlowNotNullAuditRule"
          message="SensingContextCondition InformationFlow must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//SensingContextCondition/informationflow"/>
        </target>
      </audits>
      <audits
          name="SensingContextConditionIdUniqueAuditRule"
          description="SensingContextConditionIdUniqueAuditRule"
          id="SensingContextConditionIdUniqueAuditRule"
          message="SensingContextCondition ID must be unique">
        <rule
            body="situation.entityContext.system.entities->forAll(e | &#xD;&#xA; (e.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | s.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | &#xD;&#xA;  s.sensingConditions->forAll(sc| (sc&lt;>self) implies (sc.id&lt;>self.id)) and &#xD;&#xA;  s.memoryConditions->forAll(mc|mc.id&lt;>self.id) and&#xD;&#xA;  s.actions->forAll(a|a.id&lt;>self.id) &#xD;&#xA; ) and&#xD;&#xA; e.variables->forAll(v |  (v.id&lt;>self.id)) and&#xD;&#xA; e.state->forAll(st | st.id&lt;>self.id)&#xD;&#xA;)&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//SensingContextCondition"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="MemoryContextConditionAuditContainer"
        name="MemoryContextConditionAuditContainer"
        description="MemoryContextConditionAuditContainer">
      <audits
          name="MemoryContextConditionExpressionNotNullAuditRule"
          description="MemoryContextConditionExpressionNotNullAuditRule"
          id="MemoryContextConditionExpressionNotNullAuditRule"
          message="MemoryContextCondition expression must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//MemoryContextCondition/expression"/>
        </target>
      </audits>
      <audits
          name="MemoryConditionIdUniqueAuditRule"
          description="MemoryConditionIdUniqueAuditRule"
          id="MemoryConditionIdUniqueAuditRule"
          message="MemoryCondition ID must be unique">
        <rule
            body="situation.entityContext.system.entities->forAll(e | &#xD;&#xA; (e.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | s.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | &#xD;&#xA;  s.sensingConditions->forAll(sc|  (sc.id&lt;>self.id)) and &#xD;&#xA;  s.memoryConditions->forAll(mc| (mc&lt;>self) implies (mc.id&lt;>self.id)) and&#xD;&#xA;  s.actions->forAll(a|a.id&lt;>self.id) &#xD;&#xA; ) and&#xD;&#xA; e.variables->forAll(v |  (v.id&lt;>self.id)) and&#xD;&#xA; e.state->forAll(st | st.id&lt;>self.id)&#xD;&#xA;)&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//MemoryContextCondition"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="ContextSituationAuditContainer"
        name="ContextSituationAuditContainer"
        description="ContextSituationAuditContainer">
      <audits
          name="ContextSituationIdUniqueAuditRule"
          description="ContextSituationIdUniqueAuditRule"
          id="ContextSituationIdUniqueAuditRule"
          message="ContextSituation ID must be unique">
        <rule
            body="entityContext.system.entities->forAll(e | &#xD;&#xA; (e.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s | (s&lt;>self) implies (s.id&lt;>self.id)) and&#xD;&#xA; e.situations->forAll(s | &#xD;&#xA;  s.sensingConditions->forAll(sc|  (sc.id&lt;>self.id)) and &#xD;&#xA;  s.memoryConditions->forAll(mc|  (mc.id&lt;>self.id)) and&#xD;&#xA;  s.actions->forAll(a|a.id&lt;>self.id) &#xD;&#xA; ) and&#xD;&#xA; e.variables->forAll(v |  (v.id&lt;>self.id)) and&#xD;&#xA; e.state->forAll(st | st.id&lt;>self.id)&#xD;&#xA;)&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//ContextSituation"/>
        </target>
      </audits>
      <audits
          name="ContextSituationNameNotNullAuditRule"
          description="ContextSituationNameNotNullAuditRule"
          id="ContextSituationNameNotNullAuditRule"
          message="ContextSituation name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextSituation/name"/>
        </target>
      </audits>
      <audits
          name="ContextSituationIdNotNullAuditRule"
          description="ContextSituationIdNotNullAuditRule"
          id="ContextSituationIdNotNullAuditRule"
          message="ContextSituation ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextSituation/id"/>
        </target>
      </audits>
      <audits
          name="ContextSituationNameUniqueAuditRule"
          description="ContextSituationNameUniqueAuditRule"
          id="ContextSituationNameUniqueAuditRule"
          message="ContextSituation name must be unique on this entity">
        <rule
            body="entityContext.situations->forAll(s| (s&lt;>self) implies (s.name&lt;>self.name))"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//ContextSituation"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="ContextActionAuditContainer"
        name="ContextActionAuditContainer"
        description="ContextActionAuditContainer">
      <audits
          name="ContextActionExpressionNotNullAuditRule"
          description="ContextActionExpressionNotNullAuditRule"
          id="ContextActionExpressionNotNullAuditRule"
          message="ContextAction expression must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextAction/expression"/>
        </target>
      </audits>
      <audits
          name="ContextActionIdUniqueAuditRule"
          description="ContextActionIdUniqueAuditRule"
          id="ContextActionIdUniqueAuditRule"
          message="ContextAction ID must be unique">
        <rule
            body="situation.entityContext.system.entities->forAll(e | &#xD;&#xA; (e.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s |  (s.id&lt;>self.id)) and&#xD;&#xA; e.situations->forAll(s | &#xD;&#xA;  s.sensingConditions->forAll(sc|  (sc.id&lt;>self.id)) and &#xD;&#xA;  s.memoryConditions->forAll(mc|  (mc.id&lt;>self.id)) and&#xD;&#xA;  s.actions->forAll(a | (a&lt;>self) implies (a.id&lt;>self.id)) &#xD;&#xA; ) and&#xD;&#xA; e.variables->forAll(v |  (v.id&lt;>self.id)) and&#xD;&#xA; e.state->forAll(st | st.id&lt;>self.id)&#xD;&#xA;)&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//ContextAction"/>
        </target>
      </audits>
      <audits
          name="ContextActionIdNotNullAuditRule"
          description="ContextActionIdNotNullAuditRule"
          id="ContextActionIdNotNullAuditRule"
          message="ContextAction ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextAction/id"/>
        </target>
      </audits>
      <audits
          name="ContextActionMemoryNameNotNullAuditRule"
          description="ContextActionMemoryNameNotNullAuditRule"
          id="ContextActionMemoryNameNotNullAuditRule"
          message="ContextAction memory name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextAction/memoryName"/>
        </target>
      </audits>
      <audits
          name="ContextActionMemoryNameValidAuditRule"
          description="ContextActionMemoryNameValidAuditRule"
          id="ContextActionMemoryNameValidAuditRule"
          message="ContextAction memory name not valid">
        <rule
            body="situation.entityContext.state->collect(name)->includes(self.memoryName)"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//ContextAction"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="ContextMemoryAuditContainer"
        name="ContextMemoryAuditContainer"
        description="ContextMemoryAuditContainer">
      <audits
          name="ContextMemoryNameNotNullAuditRule"
          description="ContextMemoryNameNotNullAuditRule"
          id="ContextMemoryNameNotNullAuditRule"
          message="ContextMemory name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextMemory/name"/>
        </target>
      </audits>
      <audits
          name="ContextMemoryNameUniqueAuditRule"
          description="ContextMemoryNameUniqueAuditRule"
          id="ContextMemoryNameUniqueAuditRule"
          message="ContextMemory name must be unique on this entity">
        <rule
            body="entityContext.state->forAll(s | (s&lt;>self) implies (s.name&lt;>self.name))"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//ContextMemory"/>
        </target>
      </audits>
      <audits
          name="ContextMemoryIdNotNullAuditRule"
          description="ContextMemoryIdNotNullAuditRule"
          id="ContextMemoryIdNotNullAuditRule"
          message="ContextMemory ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="entityContext.ecore#//ContextMemory/id"/>
        </target>
      </audits>
      <audits
          name="ContextMemoryIdUniqueAuditRule"
          description="ContextMemoryIdUniqueAuditRule"
          id="ContextMemoryIdUniqueAuditRule"
          message="ContextMemory ID must be unique">
        <rule
            body="entityContext.system.entities->forAll(e | &#xD;&#xA; (e.id&lt;>self.id) and&#xD;&#xA; e.situations->forAll(s |  (s.id&lt;>self.id)) and&#xD;&#xA; e.situations->forAll(s | &#xD;&#xA;  s.sensingConditions->forAll(sc|  (sc.id&lt;>self.id)) and &#xD;&#xA;  s.memoryConditions->forAll(mc|  (mc.id&lt;>self.id)) and&#xD;&#xA;  s.actions->forAll(a | (a.id&lt;>self.id)) &#xD;&#xA; ) and&#xD;&#xA; e.variables->forAll(v |  (v.id&lt;>self.id)) and&#xD;&#xA; e.state->forAll(st | (st&lt;>self) implies (st.id&lt;>self.id))&#xD;&#xA;)&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="entityContext.ecore#//ContextMemory"/>
        </target>
      </audits>
    </childContainers>
  </audits>
</gmfmap:Mapping>
