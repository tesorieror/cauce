/**
 */
package tamm.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import tamm.util.TammAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TammItemProviderAdapterFactory extends TammAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TammItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.ContextAwareSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextAwareSystemItemProvider contextAwareSystemItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.ContextAwareSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAwareSystemAdapter() {
		if (contextAwareSystemItemProvider == null) {
			contextAwareSystemItemProvider = new ContextAwareSystemItemProvider(this);
		}

		return contextAwareSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.PreCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreConditionItemProvider preConditionItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.PreCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreConditionAdapter() {
		if (preConditionItemProvider == null) {
			preConditionItemProvider = new PreConditionItemProvider(this);
		}

		return preConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.PostCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostConditionItemProvider postConditionItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.PostCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPostConditionAdapter() {
		if (postConditionItemProvider == null) {
			postConditionItemProvider = new PostConditionItemProvider(this);
		}

		return postConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.InitialCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialConditionItemProvider initialConditionItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.InitialCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialConditionAdapter() {
		if (initialConditionItemProvider == null) {
			initialConditionItemProvider = new InitialConditionItemProvider(this);
		}

		return initialConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.FinalCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalConditionItemProvider finalConditionItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.FinalCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalConditionAdapter() {
		if (finalConditionItemProvider == null) {
			finalConditionItemProvider = new FinalConditionItemProvider(this);
		}

		return finalConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.SimpleTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleTaskItemProvider simpleTaskItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.SimpleTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleTaskAdapter() {
		if (simpleTaskItemProvider == null) {
			simpleTaskItemProvider = new SimpleTaskItemProvider(this);
		}

		return simpleTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.SkipTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkipTaskItemProvider skipTaskItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.SkipTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkipTaskAdapter() {
		if (skipTaskItemProvider == null) {
			skipTaskItemProvider = new SkipTaskItemProvider(this);
		}

		return skipTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.PreConditionToSystemTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreConditionToSystemTaskItemProvider preConditionToSystemTaskItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.PreConditionToSystemTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreConditionToSystemTaskAdapter() {
		if (preConditionToSystemTaskItemProvider == null) {
			preConditionToSystemTaskItemProvider = new PreConditionToSystemTaskItemProvider(this);
		}

		return preConditionToSystemTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.SystemTaskToPostCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemTaskToPostConditionItemProvider systemTaskToPostConditionItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.SystemTaskToPostCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemTaskToPostConditionAdapter() {
		if (systemTaskToPostConditionItemProvider == null) {
			systemTaskToPostConditionItemProvider = new SystemTaskToPostConditionItemProvider(this);
		}

		return systemTaskToPostConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.AndJoin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndJoinItemProvider andJoinItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.AndJoin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndJoinAdapter() {
		if (andJoinItemProvider == null) {
			andJoinItemProvider = new AndJoinItemProvider(this);
		}

		return andJoinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.OrJoin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrJoinItemProvider orJoinItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.OrJoin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrJoinAdapter() {
		if (orJoinItemProvider == null) {
			orJoinItemProvider = new OrJoinItemProvider(this);
		}

		return orJoinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.AndSplit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndSplitItemProvider andSplitItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.AndSplit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndSplitAdapter() {
		if (andSplitItemProvider == null) {
			andSplitItemProvider = new AndSplitItemProvider(this);
		}

		return andSplitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.OrSplit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrSplitItemProvider orSplitItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.OrSplit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrSplitAdapter() {
		if (orSplitItemProvider == null) {
			orSplitItemProvider = new OrSplitItemProvider(this);
		}

		return orSplitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.InputConditionToJoinTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputConditionToJoinTaskItemProvider inputConditionToJoinTaskItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.InputConditionToJoinTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputConditionToJoinTaskAdapter() {
		if (inputConditionToJoinTaskItemProvider == null) {
			inputConditionToJoinTaskItemProvider = new InputConditionToJoinTaskItemProvider(this);
		}

		return inputConditionToJoinTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.InputConditionToSplitTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputConditionToSplitTaskItemProvider inputConditionToSplitTaskItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.InputConditionToSplitTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputConditionToSplitTaskAdapter() {
		if (inputConditionToSplitTaskItemProvider == null) {
			inputConditionToSplitTaskItemProvider = new InputConditionToSplitTaskItemProvider(this);
		}

		return inputConditionToSplitTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.JoinTaskToOutputCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinTaskToOutputConditionItemProvider joinTaskToOutputConditionItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.JoinTaskToOutputCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinTaskToOutputConditionAdapter() {
		if (joinTaskToOutputConditionItemProvider == null) {
			joinTaskToOutputConditionItemProvider = new JoinTaskToOutputConditionItemProvider(this);
		}

		return joinTaskToOutputConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tamm.SplitTaskToOutputCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SplitTaskToOutputConditionItemProvider splitTaskToOutputConditionItemProvider;

	/**
	 * This creates an adapter for a {@link tamm.SplitTaskToOutputCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSplitTaskToOutputConditionAdapter() {
		if (splitTaskToOutputConditionItemProvider == null) {
			splitTaskToOutputConditionItemProvider = new SplitTaskToOutputConditionItemProvider(this);
		}

		return splitTaskToOutputConditionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (contextAwareSystemItemProvider != null) contextAwareSystemItemProvider.dispose();
		if (preConditionItemProvider != null) preConditionItemProvider.dispose();
		if (postConditionItemProvider != null) postConditionItemProvider.dispose();
		if (initialConditionItemProvider != null) initialConditionItemProvider.dispose();
		if (finalConditionItemProvider != null) finalConditionItemProvider.dispose();
		if (simpleTaskItemProvider != null) simpleTaskItemProvider.dispose();
		if (skipTaskItemProvider != null) skipTaskItemProvider.dispose();
		if (preConditionToSystemTaskItemProvider != null) preConditionToSystemTaskItemProvider.dispose();
		if (systemTaskToPostConditionItemProvider != null) systemTaskToPostConditionItemProvider.dispose();
		if (andJoinItemProvider != null) andJoinItemProvider.dispose();
		if (orJoinItemProvider != null) orJoinItemProvider.dispose();
		if (andSplitItemProvider != null) andSplitItemProvider.dispose();
		if (orSplitItemProvider != null) orSplitItemProvider.dispose();
		if (inputConditionToJoinTaskItemProvider != null) inputConditionToJoinTaskItemProvider.dispose();
		if (inputConditionToSplitTaskItemProvider != null) inputConditionToSplitTaskItemProvider.dispose();
		if (joinTaskToOutputConditionItemProvider != null) joinTaskToOutputConditionItemProvider.dispose();
		if (splitTaskToOutputConditionItemProvider != null) splitTaskToOutputConditionItemProvider.dispose();
	}

}
