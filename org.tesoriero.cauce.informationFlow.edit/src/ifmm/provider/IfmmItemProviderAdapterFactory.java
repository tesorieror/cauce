/**
 */
package ifmm.provider;

import ifmm.util.IfmmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IfmmItemProviderAdapterFactory extends IfmmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IfmmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.SystemInformaitonFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemInformaitonFlowItemProvider systemInformaitonFlowItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.SystemInformaitonFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemInformaitonFlowAdapter() {
		if (systemInformaitonFlowItemProvider == null) {
			systemInformaitonFlowItemProvider = new SystemInformaitonFlowItemProvider(this);
		}

		return systemInformaitonFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.ContextAwareEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextAwareEntityItemProvider contextAwareEntityItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.ContextAwareEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAwareEntityAdapter() {
		if (contextAwareEntityItemProvider == null) {
			contextAwareEntityItemProvider = new ContextAwareEntityItemProvider(this);
		}

		return contextAwareEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.PointToPointInformationFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointToPointInformationFlowItemProvider pointToPointInformationFlowItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.PointToPointInformationFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointToPointInformationFlowAdapter() {
		if (pointToPointInformationFlowItemProvider == null) {
			pointToPointInformationFlowItemProvider = new PointToPointInformationFlowItemProvider(this);
		}

		return pointToPointInformationFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.BroadcastInformationFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BroadcastInformationFlowItemProvider broadcastInformationFlowItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.BroadcastInformationFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBroadcastInformationFlowAdapter() {
		if (broadcastInformationFlowItemProvider == null) {
			broadcastInformationFlowItemProvider = new BroadcastInformationFlowItemProvider(this);
		}

		return broadcastInformationFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.OutputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDataItemProvider outputDataItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.OutputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDataAdapter() {
		if (outputDataItemProvider == null) {
			outputDataItemProvider = new OutputDataItemProvider(this);
		}

		return outputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.InputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputDataItemProvider inputDataItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.InputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputDataAdapter() {
		if (inputDataItemProvider == null) {
			inputDataItemProvider = new InputDataItemProvider(this);
		}

		return inputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.EntityToBroadcastInformationFlowEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityToBroadcastInformationFlowEdgeItemProvider entityToBroadcastInformationFlowEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.EntityToBroadcastInformationFlowEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityToBroadcastInformationFlowEdgeAdapter() {
		if (entityToBroadcastInformationFlowEdgeItemProvider == null) {
			entityToBroadcastInformationFlowEdgeItemProvider = new EntityToBroadcastInformationFlowEdgeItemProvider(this);
		}

		return entityToBroadcastInformationFlowEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.EntityToPointToPointInformationFlowEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityToPointToPointInformationFlowEdgeItemProvider entityToPointToPointInformationFlowEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.EntityToPointToPointInformationFlowEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityToPointToPointInformationFlowEdgeAdapter() {
		if (entityToPointToPointInformationFlowEdgeItemProvider == null) {
			entityToPointToPointInformationFlowEdgeItemProvider = new EntityToPointToPointInformationFlowEdgeItemProvider(this);
		}

		return entityToPointToPointInformationFlowEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.BroadcastInformationFlowToEntityEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BroadcastInformationFlowToEntityEdgeItemProvider broadcastInformationFlowToEntityEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.BroadcastInformationFlowToEntityEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBroadcastInformationFlowToEntityEdgeAdapter() {
		if (broadcastInformationFlowToEntityEdgeItemProvider == null) {
			broadcastInformationFlowToEntityEdgeItemProvider = new BroadcastInformationFlowToEntityEdgeItemProvider(this);
		}

		return broadcastInformationFlowToEntityEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ifmm.PointToPointInformationFlowToEntityEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointToPointInformationFlowToEntityEdgeItemProvider pointToPointInformationFlowToEntityEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link ifmm.PointToPointInformationFlowToEntityEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointToPointInformationFlowToEntityEdgeAdapter() {
		if (pointToPointInformationFlowToEntityEdgeItemProvider == null) {
			pointToPointInformationFlowToEntityEdgeItemProvider = new PointToPointInformationFlowToEntityEdgeItemProvider(this);
		}

		return pointToPointInformationFlowToEntityEdgeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemInformaitonFlowItemProvider != null) systemInformaitonFlowItemProvider.dispose();
		if (contextAwareEntityItemProvider != null) contextAwareEntityItemProvider.dispose();
		if (pointToPointInformationFlowItemProvider != null) pointToPointInformationFlowItemProvider.dispose();
		if (broadcastInformationFlowItemProvider != null) broadcastInformationFlowItemProvider.dispose();
		if (outputDataItemProvider != null) outputDataItemProvider.dispose();
		if (inputDataItemProvider != null) inputDataItemProvider.dispose();
		if (entityToBroadcastInformationFlowEdgeItemProvider != null) entityToBroadcastInformationFlowEdgeItemProvider.dispose();
		if (entityToPointToPointInformationFlowEdgeItemProvider != null) entityToPointToPointInformationFlowEdgeItemProvider.dispose();
		if (broadcastInformationFlowToEntityEdgeItemProvider != null) broadcastInformationFlowToEntityEdgeItemProvider.dispose();
		if (pointToPointInformationFlowToEntityEdgeItemProvider != null) pointToPointInformationFlowToEntityEdgeItemProvider.dispose();
	}

}
