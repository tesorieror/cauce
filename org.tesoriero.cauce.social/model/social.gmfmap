<?xml version="1.0" encoding="UTF-8"?>
<gmfmap:Mapping
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:gmfmap="http://www.eclipse.org/gmf/2008/mappings"
    xmlns:gmftool="http://www.eclipse.org/gmf/2005/ToolDefinition">
  <nodes>
    <containmentFeature
        href="social.ecore#//Society/individuals"/>
    <ownedChild>
      <domainMetaElement
          href="social.ecore#//IndividualInstance"/>
      <domainInitializer
          xsi:type="gmfmap:FeatureSeqInitializer">
        <initializers
            xsi:type="gmfmap:FeatureValueSpec">
          <feature
              xsi:type="ecore:EAttribute"
              href="social.ecore#//IndividualInstance/id"/>
          <value
              body="society.individuals->iterate(c; m:Integer=0 | m.max(c.id)).max(society.roles->iterate(c; m:Integer=0 | m.max(c.id))).max(society.generalizations->iterate(c; m:Integer=0 | m.max(c.id))).max(society.relaizations->iterate(c; m:Integer=0 | m.max(c.id))) +1"/>
        </initializers>
        <initializers
            xsi:type="gmfmap:FeatureValueSpec">
          <feature
              xsi:type="ecore:EAttribute"
              href="social.ecore#//IndividualInstance/name"/>
          <value
              body="'Individual'.concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
        </initializers>
      </domainInitializer>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping"
          viewPattern=""
          editorPattern=""
          editPattern="">
        <diagramLabel
            href="social.gmfgraph#InstanceName"/>
        <features
            href="social.ecore#//IndividualInstance/name"/>
      </labelMappings>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping"
          readOnly="true"
          viewPattern="({0})">
        <diagramLabel
            href="social.gmfgraph#InstanceId"/>
        <features
            href="social.ecore#//IndividualInstance/id"/>
      </labelMappings>
      <tool
          xsi:type="gmftool:CreationTool"
          href="social.gmftool#//@palette/@tools.0/@tools.1"/>
      <diagramNode
          href="social.gmfgraph#Instance"/>
    </ownedChild>
  </nodes>
  <nodes>
    <containmentFeature
        href="social.ecore#//Society/roles"/>
    <ownedChild>
      <domainMetaElement
          href="social.ecore#//Role"/>
      <domainInitializer
          xsi:type="gmfmap:FeatureSeqInitializer">
        <initializers
            xsi:type="gmfmap:FeatureValueSpec">
          <feature
              xsi:type="ecore:EAttribute"
              href="social.ecore#//Role/id"/>
          <value
              body="society.individuals->iterate(c; m:Integer=0 | m.max(c.id)).max(society.roles->iterate(c; m:Integer=0 | m.max(c.id))).max(society.generalizations->iterate(c; m:Integer=0 | m.max(c.id))).max(society.relaizations->iterate(c; m:Integer=0 | m.max(c.id))) +1"/>
        </initializers>
        <initializers
            xsi:type="gmfmap:FeatureValueSpec">
          <feature
              xsi:type="ecore:EAttribute"
              href="social.ecore#//Role/name"/>
          <value
              body="'Role'.concat(&#xD;&#xA;let number: Integer = id &#xD;&#xA;in OrderedSet{1000000, 10000, 1000, 100, 10, 1}&#xD;&#xA;->iterate(denominator : Integer; s : String = '' | let numberAsString : String= OrderedSet{'0','1','2','3','4','5','6','7','8','9'}->at(number.div(denominator).mod(10) + 1)&#xD;&#xA;in if s='' and numberAsString = '0' then s else s.concat(numberAsString) endif&#xD;&#xA;))"/>
        </initializers>
      </domainInitializer>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping"
          viewPattern=""
          editorPattern=""
          editPattern="">
        <diagramLabel
            href="social.gmfgraph#RoleName"/>
        <features
            href="social.ecore#//Role/name"/>
      </labelMappings>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping"
          readOnly="true"
          viewPattern="({0})">
        <diagramLabel
            href="social.gmfgraph#RoleId"/>
        <features
            href="social.ecore#//Role/id"/>
      </labelMappings>
      <tool
          xsi:type="gmftool:CreationTool"
          href="social.gmftool#//@palette/@tools.0/@tools.0"/>
      <diagramNode
          href="social.gmfgraph#Role"/>
    </ownedChild>
  </nodes>
  <links>
    <domainMetaElement
        href="social.ecore#//Specialization"/>
    <domainInitializer
        xsi:type="gmfmap:FeatureSeqInitializer">
      <initializers
          xsi:type="gmfmap:FeatureValueSpec">
        <feature
            xsi:type="ecore:EAttribute"
            href="social.ecore#//Specialization/id"/>
        <value
            body="society.individuals->iterate(c; m:Integer=0 | m.max(c.id)).max(society.roles->iterate(c; m:Integer=0 | m.max(c.id))).max(society.generalizations->iterate(c; m:Integer=0 | m.max(c.id))).max(society.relaizations->iterate(c; m:Integer=0 | m.max(c.id))) +1"/>
      </initializers>
    </domainInitializer>
    <containmentFeature
        href="social.ecore#//Society/generalizations"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="social.gmftool#//@palette/@tools.0/@tools.3"/>
    <diagramLink
        href="social.gmfgraph#Specialization"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="social.ecore#//Specialization/source"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="social.ecore#//Specialization/target"/>
  </links>
  <links>
    <domainMetaElement
        href="social.ecore#//IndividualRealization"/>
    <domainInitializer
        xsi:type="gmfmap:FeatureSeqInitializer">
      <initializers
          xsi:type="gmfmap:FeatureValueSpec">
        <feature
            xsi:type="ecore:EAttribute"
            href="social.ecore#//IndividualRealization/id"/>
        <value
            body="society.individuals->iterate(c; m:Integer=0 | m.max(c.id)).max(society.roles->iterate(c; m:Integer=0 | m.max(c.id))).max(society.generalizations->iterate(c; m:Integer=0 | m.max(c.id))).max(society.relaizations->iterate(c; m:Integer=0 | m.max(c.id))) +1"/>
      </initializers>
    </domainInitializer>
    <containmentFeature
        href="social.ecore#//Society/relaizations"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="social.gmftool#//@palette/@tools.0/@tools.4"/>
    <diagramLink
        href="social.gmfgraph#Instantiation"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="social.ecore#//IndividualRealization/source"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="social.ecore#//IndividualRealization/target"/>
  </links>
  <diagram>
    <diagramCanvas
        href="social.gmfgraph#somm"/>
    <domainModel
        href="social.ecore#/"/>
    <domainMetaElement
        href="social.ecore#//Society"/>
    <palette
        href="social.gmftool#//@palette"/>
  </diagram>
  <audits
      id="Default Container"
      name="Default Container"
      description="Default Container">
    <childContainers
        id="SpecializationAuditContainer"
        name="SpecializationAuditContainer"
        description="SpecializationAuditContainer">
      <audits
          name="SpecializationSourceNotTargetAuditRule"
          description="SpecializationSourceNotTargetAuditRule"
          id="SpecializationSourceNotTargetAuditRule"
          message="Specialization source and target must not be the same">
        <rule
            body="source&lt;>target"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//Specialization"/>
        </target>
      </audits>
      <audits
          name="SpecializationAlreadyExistErrorAuditRule"
          description="SpecializationAlreadyExistErrorAuditRule"
          id="SpecializationAlreadyExistErrorAuditRule"
          message="Specialization already exists">
        <rule
            body="society.generalizations->forAll(g| (g&lt;>self) implies ((g.source&lt;>self.source) or (g.target&lt;>self.target)))"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//Specialization"/>
        </target>
      </audits>
      <audits
          name="SpecializationIdUniqueAuditRule"
          description="SpecializationIdUniqueAuditRule"
          id="SpecializationIdUniqueAuditRule"
          message="Specialization ID must be unique">
        <rule
            body="society.generalizations->forAll(g | (g &lt;> self) implies (g.id &lt;> self.id)) and&#xD;&#xA;society.individuals->forAll(i | (i.id &lt;> self.id)) and&#xD;&#xA;society.roles->forAll(r | r.id &lt;> self.id) and&#xD;&#xA;society.relaizations->forAll(real| real.id&lt;>self.id)"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//Specialization"/>
        </target>
      </audits>
      <audits
          name="SpecializationIdNotNullAuditRule"
          description="SpecializationIdNotNullAuditRule"
          id="SpecializationIdNotNullAuditRule"
          message="Specialization ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="social.ecore#//Specialization/id"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="SocietyAuditContainer"
        name="SocietyAuditContainer"
        description="SocietyAuditContainer">
      <audits
          name="SocietyNameNotNullAuditRule"
          description="SocietyNameNotNullAuditRule"
          id="SocietyNameNotNullAuditRule"
          message="Society name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="social.ecore#//Society/name"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="IndividualInstanceAuditContainer"
        name="IndividualInstanceAuditContainer"
        description="IndividualInstanceAuditContainer">
      <audits
          name="IndividualInstanceIdNotNullAuditRule"
          description="IndividualInstanceIdNotNullAuditRule"
          id="IndividualInstanceIdNotNullAuditRule"
          message="IndividualInstance ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="social.ecore#//IndividualInstance/id"/>
        </target>
      </audits>
      <audits
          name="IndividualInstanceIdUniqueAuditRule"
          description="IndividualInstanceIdUniqueAuditRule"
          id="IndividualInstanceIdUniqueAuditRule"
          message="IndividualInstance ID must be unique">
        <rule
            body="society.generalizations->forAll(g | g.id &lt;> self.id) and&#xD;&#xA;society.individuals->forAll(i | (i &lt;> self) implies (i.id &lt;> self.id)) and&#xD;&#xA;society.roles->forAll(r | r.id &lt;> self.id) and&#xD;&#xA;society.relaizations->forAll(real| real.id&lt;>self.id)"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//IndividualInstance"/>
        </target>
      </audits>
      <audits
          name="IndividualInstanceNameNotNullAuditRule"
          description="IndividualInstanceNameNotNullAuditRule"
          id="IndividualInstanceNameNotNullAuditRule"
          message="IndividualInstance name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="social.ecore#//IndividualInstance/name"/>
        </target>
      </audits>
      <audits
          name="IndividualInstanceNameUniqueAuditRule"
          description="IndividualInstanceNameUniqueAuditRule"
          id="IndividualInstanceNameUniqueAuditRule"
          message="IndividualInstance name must be unique">
        <rule
            body="society.individuals->forAll(i | (i &lt;> self) implies (i.name &lt;> self.name)) and&#xD;&#xA;society.roles->forAll(r | r.name &lt;> self.name)&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//IndividualInstance"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="RoleAuditContainer"
        name="RoleAuditContainer"
        description="RoleAuditContainer">
      <audits
          name="RoleIdNotNullAuditRule"
          description="RoleIdNotNullAuditRule"
          id="RoleIdNotNullAuditRule"
          message="Role ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="social.ecore#//Role/id"/>
        </target>
      </audits>
      <audits
          name="RoleIdUniqueAuditRule"
          description="RoleIdUniqueAuditRule"
          id="RoleIdUniqueAuditRule"
          message="Role ID must be unique">
        <rule
            body="society.generalizations->forAll(g | g.id &lt;> self.id) and&#xD;&#xA;society.individuals->forAll(i | (i.id &lt;> self.id)) and&#xD;&#xA;society.roles->forAll(r | (r &lt;> self) implies (r.id &lt;> self.id)) and&#xD;&#xA;society.relaizations->forAll(real| real.id&lt;>self.id)"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//Role"/>
        </target>
      </audits>
      <audits
          name="RoleNameNotNullAuditRule"
          description="RoleNameNotNullAuditRule"
          id="RoleNameNotNullAuditRule"
          message="Role name must not be null">
        <rule
            body="self.size()>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="social.ecore#//Role/name"/>
        </target>
      </audits>
      <audits
          name="RoleNameUniqueAuditRule"
          description="RoleNameUniqueAuditRule"
          id="RoleNameUniqueAuditRule"
          message="Role name must be unique">
        <rule
            body="society.individuals->forAll(i |(i.name &lt;> self.name)) and&#xD;&#xA;society.roles->forAll(r |  (r &lt;> self) implies (r.name &lt;> self.name))&#xD;&#xA;"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//Role"/>
        </target>
      </audits>
    </childContainers>
    <childContainers
        id="IndividualRealizationAuditContainer"
        name="IndividualRealizationAuditContainer"
        description="IndividualRealizationAuditContainer">
      <audits
          name="IndividualRealizationIdNotNullAuditRule"
          description="IndividualRealizationIdNotNullAuditRule"
          id="IndividualRealizationIdNotNullAuditRule"
          message="IndividualRealization ID must not be null">
        <rule
            body="self>0"/>
        <target
            xsi:type="gmfmap:DomainAttributeTarget"
            nullAsError="true">
          <attribute
              href="social.ecore#//IndividualRealization/id"/>
        </target>
      </audits>
      <audits
          name="IndividualRealizationIdUniqueAuditRule"
          description="IndividualRealizationIdUniqueAuditRule"
          id="IndividualRealizationIdUniqueAuditRule"
          message="IndividualRealization ID must be unique">
        <rule
            body="society.generalizations->forAll(g | (g.id &lt;> self.id)) and&#xD;&#xA;society.individuals->forAll(i | (i.id &lt;> self.id)) and&#xD;&#xA;society.roles->forAll(r | r.id &lt;> self.id) and&#xD;&#xA;society.relaizations->forAll(real| (real &lt;> self) implies (real.id&lt;>self.id))"/>
        <target
            xsi:type="gmfmap:DomainElementTarget">
          <element
              href="social.ecore#//IndividualRealization"/>
        </target>
      </audits>
    </childContainers>
  </audits>
</gmfmap:Mapping>
